import { useQuery, gql } from '@apollo/client';
import { Amplify, API, Auth, withSSRContext } from 'aws-amplify';
import Head from 'next/head';
import Image from 'next/image'
import { FormEvent } from 'react';

import awsExports from '../src/aws-exports';
import { createMovie } from '../src/graphql/mutations';
import { listMovies } from '../src/graphql/queries';
import { Movie } from '../src/API';
import styles from '../styles/Home.module.css';

import { client, countriesClient } from './_app';

Amplify.configure({ ...awsExports, ssr: true });

const GET_LOCATIONS = gql`
  query GetLocations {
    locations {
      id
      name
      description
      photo
    }
  }
`;

const GET_COUNTRY = gql`
  query Query {
    country(code: "BR") {
      code
      name
    }
  }
`

type HomeProps = {
  movies: Movie[]
}

export async function getServerSideProps({ req }: any) {
  const SSR = withSSRContext({ req });
  try {
    const response = await SSR.API.graphql({ query: listMovies });
    return {
      props: {
        movies: response.data.listMovies.items,
      },
    };
  } catch (err) {
    console.log(err);
    return {
      props: {},
    };
  }
}

async function handleCreateMovie(event: FormEvent<HTMLFormElement>) {
  event.preventDefault();

  if (!event.target) {
    console.log('Missing event.target', event.target)
    return
  }

  const form = new FormData(event.target as HTMLFormElement);

  try {
    const { data } = await API.graphql({
      authMode: 'API_KEY',
      query: createMovie,
      variables: {
        input: {
          title: form.get('title'),
          description: form.get('description')
        }
      }
    });

    window.location.href = `/movie/${data.createMovie.title}`;
  } catch (error: any) {
    const { errors = [] } = error
    if (!error?.errors?.length) {
      console.error(error)
      return
    }
    console.error(...errors);
    throw new Error(errors[0].message);
  }
}

export default function Home({ movies = [] }: HomeProps) {
  const { loading, error, data } = useQuery(GET_LOCATIONS, {
    client
  });

  const { loading: countryLoading, error: countryError, data: countryData } = useQuery(GET_COUNTRY, {
    client: countriesClient
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <h2>Apollo Docs Api</h2>

        <p className={styles.description}>
          <code className={styles.code}>{movies.length}</code>
          movies
        </p>

        <div className={styles.grid}>
          {movies.map((movie) => (
            <a className={styles.card} href={`/movie/${movie.title}`} key={movie.title}>
              <h3>{movie.title}</h3>
              <p>{movie.description}</p>
            </a>
          ))}

          <div className={styles.card}>
            <h3 className={styles.title}>New Movie</h3>

            <form onSubmit={handleCreateMovie}>
              <fieldset>
                <legend>Title</legend>
                <input
                  defaultValue={`Today, ${new Date().toLocaleTimeString()}`}
                  name="title"
                />
              </fieldset>

              <fieldset>
                <legend>Content</legend>
                <textarea
                  defaultValue="I built an Amplify project with Next.js!"
                  name="description"
                />
              </fieldset>

              <button>Create Movie</button>
            </form>
          </div>
        </div>

        <div className={styles.grid}>
          {loading && <h2>Loading...</h2>}
          {error && <p>Error: {error.message}</p>}
          {data?.locations?.map(({ code: id, name }: { code: string, name: string }) => (
            <div key={id} className={styles.card}>
              <h4>{name}</h4>
            </div>
          ))}
        </div>

        <h2>Countries Api</h2>

        {countryLoading && <h2>Countries loading...</h2>}
        {countryError && <p>Countries error: {countryError.message}</p>}
        {countryData?.country && <div key={countryData?.country.code} className={styles.card}>
          <h4>{countryData?.country?.name}</h4>
        </div>}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
